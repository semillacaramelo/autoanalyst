# **AI-Driven Trading Crew System: Consolidated Development Plan**

## **Executive Summary**

A modular, AI-powered trading platform leveraging **CrewAI** multi-agent framework, **Google Gemini** LLM, and **Alpaca Markets** API. Built on **Google Firebase** infrastructure for serverless scalability, real-time monitoring, and secure deployment.

---

## **1. System Architecture**

### **1.1 High-Level Architecture**

```
┌─────────────────────────────────────────────────────────────────┐
│                         USER INTERFACE                          │
│          (React + Firebase Hosting + Material-UI)               │
│  - Authentication  - Configuration  - Live Monitoring           │
└────────────────────┬────────────────────────────────────────────┘
                     │ HTTPS / Real-time Listeners
┌────────────────────┴────────────────────────────────────────────┐
│                    FIREBASE BACKEND LAYER                       │
│  ┌──────────────┐  ┌──────────────┐  ┌───────────────────┐    │
│  │   Firebase   │  │  Firestore   │  │  Cloud Functions  │    │
│  │     Auth     │  │   Database   │  │  (HTTPS Trigger)  │    │
│  └──────────────┘  └──────────────┘  └───────┬───────────┘    │
└────────────────────────────────────────────────┼────────────────┘
                                                 │
┌────────────────────────────────────────────────┴────────────────┐
│                      CREWAI ORCHESTRATION                       │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │  Agent 1  →  Agent 2  →  Agent 3  →  Agent 4  →  Agent N │  │
│  │    ↓            ↓            ↓            ↓            ↓  │  │
│  │  Tool A      Tool B      Tool C      Tool D      Tool E  │  │
│  └──────────────────────────────────────────────────────────┘  │
└─────────────────────────┬───────────────────┬───────────────────┘
                          │                   │
              ┌───────────┴─────────┐  ┌──────┴──────────┐
              │  Gemini Connector   │  │  Alpaca Tools   │
              │  (Key Rotation)     │  │  (Market Data   │
              │  Multiple Models    │  │   & Execution)  │
              └─────────────────────┘  └─────────────────┘
```

### **1.2 Technology Stack**

| Layer | Technology | Purpose |
|-------|-----------|---------|
| **Frontend** | React + Material-UI | User interface |
| **Hosting** | Firebase Hosting | Static site deployment |
| **Authentication** | Firebase Auth | Google OAuth integration |
| **Database** | Cloud Firestore | Real-time NoSQL database |
| **Compute** | Cloud Functions | Serverless backend |
| **Secrets** | Secret Manager | Secure API key storage |
| **AI Framework** | CrewAI | Multi-agent orchestration |
| **LLM** | Google Gemini (1.5 Pro) | Agent reasoning engine |
| **Brokerage** | Alpaca Markets API | Market data & execution |
| **Data Analysis** | Pandas, NumPy | Technical analysis |

---

## **2. Core Components**

### **2.1 Gemini Connection Manager (Enhanced)**

**Purpose:** Centralized LLM management with API key rotation and model selection.

```python
# gemini_connector.py
import os
from itertools import cycle
from typing import List, Optional
from langchain_google_genai import ChatGoogleGenerativeAI
from config import GEMINI_API_KEYS

class GeminiConnectionManager:
    """
    Manages Gemini API connections with automatic key rotation
    and dynamic model selection.
    """
    def __init__(self, api_keys: Optional[List[str]] = None):
        if not api_keys:
            api_keys = GEMINI_API_KEYS
        if not api_keys:
            raise ValueError("GEMINI_API_KEYS not configured")
        
        self._api_key_cycler = cycle(api_keys)
        self.active_key = None

    def _get_next_key(self) -> str:
        """Rotates to the next available API key."""
        self.active_key = next(self._api_key_cycler)
        return self.active_key

    def get_llm(self, 
                model_name: str = "gemini-1.5-pro-latest", 
                temperature: float = 0.1) -> ChatGoogleGenerativeAI:
        """
        Provides a configured LLM instance with rotated API key.
        
        Args:
            model_name: Gemini model identifier
            temperature: Response creativity (0.0-1.0)
        
        Returns:
            Configured ChatGoogleGenerativeAI instance
        """
        api_key = self._get_next_key()
        print(f"[GeminiManager] Using model: {model_name}")
        
        return ChatGoogleGenerativeAI(
            model=model_name,
            verbose=True,
            temperature=temperature,
            google_api_key=api_key,
            convert_system_message_to_human=True
        )

# Singleton instance
gemini_manager = GeminiConnectionManager()
```

### **2.2 Configuration Management**

```python
# config.py
import os
from dotenv import load_dotenv

load_dotenv()

# Gemini API Keys (comma-separated in .env)
GEMINI_API_KEYS_STR = os.getenv("GEMINI_API_KEYS", "")
GEMINI_API_KEYS = [key.strip() for key in GEMINI_API_KEYS_STR.split(',') if key.strip()]

# Alpaca Configuration
ALPACA_API_KEY = os.getenv("ALPACA_API_KEY")
ALPACA_SECRET_KEY = os.getenv("ALPACA_SECRET_KEY")
ALPACA_CONFIG = {
    "key_id": ALPACA_API_KEY,
    "secret_key": ALPACA_SECRET_KEY,
    "paper": True,  # Start with paper trading
}
```

**Environment Variables (.env):**
```bash
GEMINI_API_KEYS="key1,key2,key3"
ALPACA_API_KEY="your_alpaca_key"
ALPACA_SECRET_KEY="your_alpaca_secret"
```

### **2.3 Alpaca Tools Module**

```python
# tools/alpaca_tools.py
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce
from alpaca.data.historical import StockHistoricalDataClient
from alpaca.data.requests import StockBarsRequest
from alpaca.data.timeframe import TimeFrame
import pandas as pd
from config import ALPACA_CONFIG

def get_alpaca_trading_client():
    """Initializes and returns an Alpaca TradingClient."""
    return TradingClient(
        ALPACA_CONFIG['key_id'], 
        ALPACA_CONFIG['secret_key'], 
        paper=ALPACA_CONFIG['paper']
    )

def fetch_historical_data(symbol, timeframe, start_date, end_date):
    """Fetches historical OHLCV data for a given symbol."""
    client = StockHistoricalDataClient(
        ALPACA_CONFIG['key_id'], 
        ALPACA_CONFIG['secret_key']
    )
    request_params = StockBarsRequest(
        symbol_or_symbols=[symbol],
        timeframe=timeframe,
        start=pd.to_datetime(start_date),
        end=pd.to_datetime(end_date)
    )
    bars = client.get_stock_bars(request_params)
    return bars.df

def place_market_order(symbol, qty, side):
    """Places a market order via Alpaca API."""
    trading_client = get_alpaca_trading_client()
    market_order_data = MarketOrderRequest(
        symbol=symbol,
        qty=qty,
        side=OrderSide[side.upper()],
        time_in_force=TimeInForce.DAY
    )
    market_order = trading_client.submit_order(order_data=market_order_data)
    print(f"[Alpaca] Order placed: {symbol} {side} {qty} shares - ID: {market_order.id}")
    return market_order

def get_account_info():
    """Retrieves account information and buying power."""
    trading_client = get_alpaca_trading_client()
    return trading_client.get_account()

def get_trade_history():
    """Retrieves closed orders/trade history."""
    trading_client = get_alpaca_trading_client()
    return trading_client.get_orders(status='closed')
```

---

## **3. Agent Definitions**

### **3.1 Agent Specifications**

| # | Agent Name | Role | Goal | Key Tools |
|---|------------|------|------|-----------|
| **1** | `AlpacaConnectionManager` | Brokerage Connectivity Specialist | Ensure stable, authenticated connection to Alpaca API | `get_alpaca_trading_client` |
| **2** | `HistoricalDataAgent` | Market Data Historian | Fetch and maintain accurate historical market data | `fetch_historical_data` |
| **3** | `AssetSelectionAgent` | Portfolio Strategy Analyst | Select optimal assets based on volatility, liquidity, and criteria | `fetch_market_data`, `filter_assets_by_volume` |
| **4** | `TrendAnalysisAgent` | Quantitative Strategy Specialist | Implement 3MA strategy to generate trade signals | `calculate_3ma_signal` |
| **5** | `SignalConfirmationAgent` | Chief Risk Officer | Validate signal quality and risk profile before execution | `check_market_volatility`, `analyze_signal_strength` |
| **6** | `TradeExecutionAgent` | Head of Trading Desk | Execute confirmed signals via Alpaca API | `place_market_order` |
| **7** | `PerformanceAnalysisAgent` | Performance Review Analyst | Track outcomes, calculate KPIs, generate reports | `get_trade_history`, `calculate_performance_metrics` |
| **8** | `StrategyEnhancementAgent` | AI Strategy Futurist | Propose data-driven strategy improvements | `read_performance_report` |

### **3.2 Crew Setup**

```python
# crew_setup.py
from crewai import Agent, Task, Crew, Process
from gemini_connector import gemini_manager
from agents.analysis_agents import (
    asset_selector, trend_analyzer, signal_confirmer, 
    performance_analyzer, strategy_enhancer
)
from agents.execution_agents import trade_executor
from tasks import (
    select_asset_task, analyze_trend_task, confirm_signal_task,
    execute_trade_task, analyze_performance_task, enhance_strategy_task
)

# Get configured Gemini LLM with key rotation
gemini_llm = gemini_manager.get_llm(model_name="gemini-1.5-pro-latest")

# Assign LLM to all agents
for agent in [asset_selector, trend_analyzer, signal_confirmer, 
              trade_executor, performance_analyzer, strategy_enhancer]:
    agent.llm = gemini_llm

# Define the trading crew
trading_crew = Crew(
    agents=[
        asset_selector,
        trend_analyzer,
        signal_confirmer,
        trade_executor,
        performance_analyzer,
        strategy_enhancer
    ],
    tasks=[
        select_asset_task,
        analyze_trend_task,
        confirm_signal_task,
        execute_trade_task,
        analyze_performance_task,
        enhance_strategy_task
    ],
    process=Process.sequential,
    verbose=2
)
```

---

## **4. Firebase Implementation**

### **4.1 Firestore Data Model**

```
/users/{userId}/
  ├─ config/                    # Document
  │   ├─ assetsOfInterest: ["SPY", "QQQ"]
  │   └─ strategyParams: { ma_short: 8, ma_medium: 13, ma_long: 21 }
  │
  └─ secrets/                   # Document (use Secret Manager in production)
      ├─ alpaca_api_key: "..."
      └─ alpaca_secret_key: "..."

/runs/{runId}/
  ├─ summary/                   # Document
  │   ├─ userId: "..."
  │   ├─ asset: "SPY"
  │   ├─ startTime: timestamp
  │   ├─ endTime: timestamp
  │   ├─ status: "RUNNING" | "COMPLETED" | "FAILED"
  │   └─ finalOutcome: "..."
  │
  └─ logs/                      # Sub-collection
      └─ {logId}/               # Auto-generated documents
          ├─ timestamp: timestamp
          ├─ agent: "TrendAnalysisAgent"
          └─ message: "Calculating 3MA for SPY. Signal: BUY."
```

### **4.2 Cloud Function (Start Crew)**

```python
# functions/main.py
import firebase_admin
from firebase_admin import firestore, auth
from firebase_functions import https_fn
from crew_setup import trading_crew
import datetime

firebase_admin.initialize_app()
db = firestore.client()

@https_fn.on_call()
def start_crew(req: https_fn.CallableRequest):
    """
    HTTPS-triggered Cloud Function to initiate a trading crew run.
    """
    # Authenticate user
    if not req.auth:
        raise https_fn.HttpsError('unauthenticated', 'User must be authenticated')
    
    user_id = req.auth.uid
    asset = req.data.get('asset')
    strategy_params = req.data.get('strategyParams', {})
    
    if not asset:
        raise https_fn.HttpsError('invalid-argument', 'Asset is required')
    
    # Create run document
    run_ref = db.collection('runs').document()
    run_id = run_ref.id
    
    run_ref.set({
        'userId': user_id,
        'asset': asset,
        'startTime': firestore.SERVER_TIMESTAMP,
        'status': 'RUNNING',
        'strategyParams': strategy_params
    })
    
    try:
        # Execute CrewAI workflow
        result = trading_crew.kickoff(inputs={
            'assets_of_interest': [asset],
            'strategy_params': strategy_params,
            'run_id': run_id,
            'user_id': user_id
        })
        
        # Update run with completion
        run_ref.update({
            'endTime': firestore.SERVER_TIMESTAMP,
            'status': 'COMPLETED',
            'finalOutcome': str(result)
        })
        
        return {'status': 'success', 'runId': run_id, 'result': str(result)}
    
    except Exception as e:
        # Log error and update status
        run_ref.update({
            'endTime': firestore.SERVER_TIMESTAMP,
            'status': 'FAILED',
            'error': str(e)
        })
        raise https_fn.HttpsError('internal', f'Crew execution failed: {str(e)}')
```

### **4.3 Security Rules**

```javascript
// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User data: only accessible by the authenticated user
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Run data: readable by owner, writable by Cloud Functions
    match /runs/{runId} {
      allow read: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      allow create, update: if request.auth != null;
      
      match /logs/{logId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
      }
    }
  }
}
```

---

## **5. Development Roadmap**

### **Phase 1: Foundation (Weeks 1-2)**

**Deliverables:**
- [ ] Project scaffolding and Git repository
- [ ] Environment setup with Poetry/pip
- [ ] Configuration management (`config.py`, `.env`)
- [ ] Gemini Connector with key rotation
- [ ] Alpaca Tools module with paper trading
- [ ] Firebase project setup (Auth, Firestore, Functions)

**Acceptance Criteria:**
- Developer can clone, setup environment, and connect to Alpaca paper trading
- Gemini LLM instances can be created with automatic key rotation
- Firebase Authentication works with Google Sign-In

---

### **Phase 2: Core Trading Loop - MVP (Weeks 3-5)**

**Deliverables:**
- [ ] Define initial agents (Data, Trend, Confirmation, Execution)
- [ ] Implement 3MA signal calculation tool
- [ ] Create sequential task pipeline
- [ ] Deploy Cloud Function for crew execution
- [ ] Basic React frontend with authentication

**Acceptance Criteria:**
- User can log in with Google
- User can configure asset and start crew
- Crew executes full pipeline: Data → Signal → Confirmation → Trade
- Paper trade is placed in Alpaca account
- Run logs are written to Firestore

---

### **Phase 3: Monitoring & Feedback (Weeks 6-7)**

**Deliverables:**
- [ ] Performance Analysis Agent
- [ ] Strategy Enhancement Agent
- [ ] Real-time log streaming in UI
- [ ] Performance metrics calculation (Win Rate, P&L, Sharpe Ratio)
- [ ] Performance dashboard with charts (Plotly)

**Acceptance Criteria:**
- Performance Agent retrieves and analyzes trade history
- Enhancement Agent generates actionable improvement suggestions
- UI displays real-time agent logs via Firestore listeners
- Dashboard shows equity curve and key KPIs

---

### **Phase 4: Production Readiness (Weeks 8-10)**

**Deliverables:**
- [ ] Migrate secrets to Google Secret Manager
- [ ] Implement comprehensive error handling and retry logic
- [ ] Add Risk Management Agent with portfolio constraints
- [ ] Create alert system (email/Discord) for critical events
- [ ] Extensive testing in paper trading mode
- [ ] Production deployment checklist

**Acceptance Criteria:**
- All API keys stored in Secret Manager, not Firestore
- System recovers gracefully from API failures
- Risk Agent can halt trading based on portfolio rules
- Alerts are sent for system failures
- Complete test coverage of critical paths

---

### **Phase 5: Live Trading & Optimization (Weeks 11+)**

**Deliverables:**
- [ ] Live trading mode toggle with safety confirmations
- [ ] Additional strategy agents (sentiment analysis, arbitrage)
- [ ] Advanced visualization and reporting
- [ ] Mobile app (React Native or Flutter)
- [ ] Performance optimization (cold start reduction)

**Acceptance Criteria:**
- System successfully executes live trades with user confirmation
- Multiple strategies can run in parallel
- Mobile app provides full monitoring capabilities
- Average Cloud Function cold start < 3 seconds

---

## **6. Non-Functional Requirements**

### **6.1 Security**
- **Authentication:** Firebase Auth with Google OAuth
- **Authorization:** Firestore Security Rules enforce user-level access
- **Secrets Management:** Google Secret Manager for all API keys (production)
- **Encryption:** HTTPS for all communications, data encrypted at rest in Firestore

### **6.2 Performance**
- **Response Time:** UI interactions < 200ms, crew execution < 60s for single asset
- **Cold Starts:** Cloud Function cold start managed with warming strategies
- **Real-time Updates:** Firestore listeners for sub-second log updates

### **6.3 Scalability**
- **Concurrent Users:** Firebase auto-scales to support 1000+ concurrent users
- **API Rate Limits:** 
  - Gemini: Managed via key rotation (60 RPM per key × N keys)
  - Alpaca: Respects 200 requests/minute limit with exponential backoff

### **6.4 Reliability**
- **Error Handling:** Try-catch blocks with structured logging
- **Retry Logic:** Exponential backoff for transient API failures
- **Monitoring:** Google Cloud Monitoring for function execution metrics
- **Uptime Target:** 99.5% availability during market hours

### **6.5 Compliance**
- **Paper Trading Default:** All new users start in paper mode
- **User Consent:** Clear disclaimer that system is for educational purposes
- **Data Privacy:** User data isolated, GDPR-compliant data handling

---

## **7. Project Structure**

```
trading-crew/
├── functions/                  # Firebase Cloud Functions
│   ├── main.py                 # Cloud Function entry points
│   ├── crew_setup.py           # Crew and agent definitions
│   ├── tasks.py                # Task definitions
│   ├── config.py               # Configuration management
│   ├── gemini_connector.py     # Gemini LLM manager
│   ├── agents/
│   │   ├── analysis_agents.py
│   │   └── execution_agents.py
│   └── tools/
│       ├── alpaca_tools.py
│       └── analysis_tools.py
│
├── frontend/                   # React application
│   ├── src/
│   │   ├── components/
│   │   │   ├── Auth.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   ├── LiveLogs.jsx
│   │   │   ├── PerformanceChart.jsx
│   │   │   └── Settings.jsx
│   │   ├── firebase.js         # Firebase config
│   │   └── App.jsx
│   └── package.json
│
├── firestore.rules             # Security rules
├── firebase.json               # Firebase config
├── .env.template               # Environment variables template
├── pyproject.toml              # Python dependencies (Poetry)
└── README.md                   # Project documentation
```

---

## **8. Quick Start Guide**

### **8.1 Prerequisites**
```bash
# Install Node.js, Python 3.11+, Firebase CLI
npm install -g firebase-tools
firebase login
```

### **8.2 Initial Setup**
```bash
# Clone repository
git clone <repo-url>
cd trading-crew

# Setup Python environment
poetry install  # or pip install -r requirements.txt

# Setup environment variables
cp .env.template .env
# Edit .env with your API keys

# Initialize Firebase
firebase init
# Select: Functions, Firestore, Hosting

# Deploy
firebase deploy
```

### **8.3 Local Development**
```bash
# Backend (Functions)
cd functions
firebase emulators:start

# Frontend
cd frontend
npm start
```

---

## **9. Success Metrics**

### **KPIs for MVP Launch:**
- ✅ 100% successful paper trades executed without errors
- ✅ <5% false signal rate in backtesting
- ✅ Real-time logs displayed with <1s latency
- ✅ Strategy Enhancement Agent produces actionable suggestions in 80%+ of runs
- ✅ Zero security vulnerabilities in Firebase Security Rules audit

### **Long-term Goals:**
- Positive Sharpe Ratio >1.0 in live trading
- User retention rate >60% after 3 months
- Average crew execution time <30 seconds
- Support for 10+ concurrent trading strategies